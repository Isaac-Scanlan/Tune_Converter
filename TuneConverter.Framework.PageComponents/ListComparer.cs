using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TuneConverter.Framework.PageComponents;

/// <summary>
/// Compares two lists of type <typeparamref name="T"/> for equality.
/// Implements the <see cref="IEqualityComparer{T}"/> interface for comparing lists.
/// This is used to compare bar of music with previously generated Images in the cache
/// </summary>
/// <typeparam name="T">The type of elements in the lists being compared.</typeparam>
public class ListComparer<T> : IEqualityComparer<List<T>>
{
    /// <summary>
    /// Determines whether two lists of type <typeparamref name="T"/> are equal.
    /// </summary>
    /// <param name="x">The first list to compare.</param>
    /// <param name="y">The second list to compare.</param>
    /// <returns>
    /// <c>true</c> if the lists are equal; otherwise, <c>false</c>.
    /// Lists are considered equal if they contain the same elements in the same order.
    /// </returns>
    // TODO: Address Nullability of Reference types
    public bool Equals(List<T> x, List<T> y) => x.SequenceEqual(y);

    /// <summary>
    /// Returns a hash code for a list of type <typeparamref name="T"/>.
    /// </summary>
    /// <param name="obj">The list for which to generate a hash code.</param>
    /// <returns>
    /// A hash code for the specified list. The hash code is generated by XORing the hash codes of the elements in the list.
    /// </returns>
    public int GetHashCode(List<T> obj)
    {
        int hashcode = 0;
        foreach (T t in obj)
        {
            hashcode ^= t.GetHashCode();
        }
        return hashcode;
    }
}
